// DONTCOVER
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: arkeo/arkeo/events.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_arkeonetwork_arkeo_common "github.com/arkeonetwork/arkeo/common"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventBondProvider is emitted when a provider bonds tokens to their service.
type EventBondProvider struct {
	Provider github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,1,opt,name=provider,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"provider,omitempty"`
	Service  string                                      `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	BondRel  cosmossdk_io_math.Int                       `protobuf:"bytes,3,opt,name=bond_rel,json=bondRel,proto3,customtype=cosmossdk.io/math.Int" json:"bond_rel"`
	BondAbs  cosmossdk_io_math.Int                       `protobuf:"bytes,4,opt,name=bond_abs,json=bondAbs,proto3,customtype=cosmossdk.io/math.Int" json:"bond_abs"`
}

func (m *EventBondProvider) Reset()         { *m = EventBondProvider{} }
func (m *EventBondProvider) String() string { return proto.CompactTextString(m) }
func (*EventBondProvider) ProtoMessage()    {}
func (*EventBondProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_39b4417094f69f41, []int{0}
}
func (m *EventBondProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBondProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBondProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBondProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBondProvider.Merge(m, src)
}
func (m *EventBondProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventBondProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBondProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventBondProvider proto.InternalMessageInfo

func (m *EventBondProvider) GetProvider() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *EventBondProvider) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

// EventModProvider is emitted when a provider's metadata or status is modified.
type EventModProvider struct {
	Creator             github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	Provider            github_com_arkeonetwork_arkeo_common.PubKey   `protobuf:"bytes,2,opt,name=provider,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"provider,omitempty"`
	Service             string                                        `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	MetadataUri         string                                        `protobuf:"bytes,4,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	MetadataNonce       uint64                                        `protobuf:"varint,5,opt,name=metadata_nonce,json=metadataNonce,proto3" json:"metadata_nonce,omitempty"`
	Status              ProviderStatus                                `protobuf:"varint,6,opt,name=status,proto3,enum=arkeo.arkeo.ProviderStatus" json:"status,omitempty"`
	MinContractDuration int64                                         `protobuf:"varint,7,opt,name=min_contract_duration,json=minContractDuration,proto3" json:"min_contract_duration,omitempty"`
	MaxContractDuration int64                                         `protobuf:"varint,8,opt,name=max_contract_duration,json=maxContractDuration,proto3" json:"max_contract_duration,omitempty"`
	SubscriptionRate    []types.Coin                                  `protobuf:"bytes,9,rep,name=subscription_rate,json=subscriptionRate,proto3" json:"subscription_rate"`
	PayAsYouGoRate      []types.Coin                                  `protobuf:"bytes,10,rep,name=pay_as_you_go_rate,json=payAsYouGoRate,proto3" json:"pay_as_you_go_rate"`
	Bond                cosmossdk_io_math.Int                         `protobuf:"bytes,11,opt,name=bond,proto3,customtype=cosmossdk.io/math.Int" json:"bond"`
	SettlementDuration  int64                                         `protobuf:"varint,12,opt,name=settlement_duration,json=settlementDuration,proto3" json:"settlement_duration,omitempty"`
}

func (m *EventModProvider) Reset()         { *m = EventModProvider{} }
func (m *EventModProvider) String() string { return proto.CompactTextString(m) }
func (*EventModProvider) ProtoMessage()    {}
func (*EventModProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_39b4417094f69f41, []int{1}
}
func (m *EventModProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventModProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventModProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventModProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventModProvider.Merge(m, src)
}
func (m *EventModProvider) XXX_Size() int {
	return m.Size()
}
func (m *EventModProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_EventModProvider.DiscardUnknown(m)
}

var xxx_messageInfo_EventModProvider proto.InternalMessageInfo

func (m *EventModProvider) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *EventModProvider) GetProvider() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *EventModProvider) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *EventModProvider) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *EventModProvider) GetMetadataNonce() uint64 {
	if m != nil {
		return m.MetadataNonce
	}
	return 0
}

func (m *EventModProvider) GetStatus() ProviderStatus {
	if m != nil {
		return m.Status
	}
	return ProviderStatus_OFFLINE
}

func (m *EventModProvider) GetMinContractDuration() int64 {
	if m != nil {
		return m.MinContractDuration
	}
	return 0
}

func (m *EventModProvider) GetMaxContractDuration() int64 {
	if m != nil {
		return m.MaxContractDuration
	}
	return 0
}

func (m *EventModProvider) GetSubscriptionRate() []types.Coin {
	if m != nil {
		return m.SubscriptionRate
	}
	return nil
}

func (m *EventModProvider) GetPayAsYouGoRate() []types.Coin {
	if m != nil {
		return m.PayAsYouGoRate
	}
	return nil
}

func (m *EventModProvider) GetSettlementDuration() int64 {
	if m != nil {
		return m.SettlementDuration
	}
	return 0
}

// EventOpenContract is emitted when a contract is opened on chain.
type EventOpenContract struct {
	Provider           github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,1,opt,name=provider,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"provider,omitempty"`
	ContractId         uint64                                      `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Service            string                                      `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Client             github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,4,opt,name=client,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"client,omitempty"`
	Delegate           github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,5,opt,name=delegate,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"delegate,omitempty"`
	Type               ContractType                                `protobuf:"varint,6,opt,name=type,proto3,enum=arkeo.arkeo.ContractType" json:"type,omitempty"`
	Height             int64                                       `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	Duration           int64                                       `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Rate               types.Coin                                  `protobuf:"bytes,9,opt,name=rate,proto3" json:"rate"`
	OpenCost           int64                                       `protobuf:"varint,10,opt,name=open_cost,json=openCost,proto3" json:"open_cost,omitempty"`
	Deposit            cosmossdk_io_math.Int                       `protobuf:"bytes,11,opt,name=deposit,proto3,customtype=cosmossdk.io/math.Int" json:"deposit"`
	SettlementDuration int64                                       `protobuf:"varint,12,opt,name=settlement_duration,json=settlementDuration,proto3" json:"settlement_duration,omitempty"`
	Authorization      ContractAuthorization                       `protobuf:"varint,13,opt,name=authorization,proto3,enum=arkeo.arkeo.ContractAuthorization" json:"authorization,omitempty"`
	QueriesPerMinute   int64                                       `protobuf:"varint,14,opt,name=queries_per_minute,json=queriesPerMinute,proto3" json:"queries_per_minute,omitempty"`
	SettlementHeight   int64                                       `protobuf:"varint,15,opt,name=settlement_height,json=settlementHeight,proto3" json:"settlement_height,omitempty"`
}

func (m *EventOpenContract) Reset()         { *m = EventOpenContract{} }
func (m *EventOpenContract) String() string { return proto.CompactTextString(m) }
func (*EventOpenContract) ProtoMessage()    {}
func (*EventOpenContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_39b4417094f69f41, []int{2}
}
func (m *EventOpenContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOpenContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOpenContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOpenContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOpenContract.Merge(m, src)
}
func (m *EventOpenContract) XXX_Size() int {
	return m.Size()
}
func (m *EventOpenContract) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOpenContract.DiscardUnknown(m)
}

var xxx_messageInfo_EventOpenContract proto.InternalMessageInfo

func (m *EventOpenContract) GetProvider() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *EventOpenContract) GetContractId() uint64 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

func (m *EventOpenContract) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *EventOpenContract) GetClient() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *EventOpenContract) GetDelegate() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Delegate
	}
	return nil
}

func (m *EventOpenContract) GetType() ContractType {
	if m != nil {
		return m.Type
	}
	return ContractType_SUBSCRIPTION
}

func (m *EventOpenContract) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EventOpenContract) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *EventOpenContract) GetRate() types.Coin {
	if m != nil {
		return m.Rate
	}
	return types.Coin{}
}

func (m *EventOpenContract) GetOpenCost() int64 {
	if m != nil {
		return m.OpenCost
	}
	return 0
}

func (m *EventOpenContract) GetSettlementDuration() int64 {
	if m != nil {
		return m.SettlementDuration
	}
	return 0
}

func (m *EventOpenContract) GetAuthorization() ContractAuthorization {
	if m != nil {
		return m.Authorization
	}
	return ContractAuthorization_STRICT
}

func (m *EventOpenContract) GetQueriesPerMinute() int64 {
	if m != nil {
		return m.QueriesPerMinute
	}
	return 0
}

func (m *EventOpenContract) GetSettlementHeight() int64 {
	if m != nil {
		return m.SettlementHeight
	}
	return 0
}

// EventSettleContract is emitted when a contract is settled.
type EventSettleContract struct {
	Provider   github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,1,opt,name=provider,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"provider,omitempty"`
	ContractId uint64                                      `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Service    string                                      `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Client     github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,4,opt,name=client,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"client,omitempty"`
	Delegate   github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,5,opt,name=delegate,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"delegate,omitempty"`
	Type       ContractType                                `protobuf:"varint,6,opt,name=type,proto3,enum=arkeo.arkeo.ContractType" json:"type,omitempty"`
	Nonce      int64                                       `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Height     int64                                       `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	Paid       cosmossdk_io_math.Int                       `protobuf:"bytes,9,opt,name=paid,proto3,customtype=cosmossdk.io/math.Int" json:"paid"`
	Reserve    cosmossdk_io_math.Int                       `protobuf:"bytes,10,opt,name=reserve,proto3,customtype=cosmossdk.io/math.Int" json:"reserve"`
}

func (m *EventSettleContract) Reset()         { *m = EventSettleContract{} }
func (m *EventSettleContract) String() string { return proto.CompactTextString(m) }
func (*EventSettleContract) ProtoMessage()    {}
func (*EventSettleContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_39b4417094f69f41, []int{3}
}
func (m *EventSettleContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSettleContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSettleContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSettleContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSettleContract.Merge(m, src)
}
func (m *EventSettleContract) XXX_Size() int {
	return m.Size()
}
func (m *EventSettleContract) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSettleContract.DiscardUnknown(m)
}

var xxx_messageInfo_EventSettleContract proto.InternalMessageInfo

func (m *EventSettleContract) GetProvider() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *EventSettleContract) GetContractId() uint64 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

func (m *EventSettleContract) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *EventSettleContract) GetClient() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *EventSettleContract) GetDelegate() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Delegate
	}
	return nil
}

func (m *EventSettleContract) GetType() ContractType {
	if m != nil {
		return m.Type
	}
	return ContractType_SUBSCRIPTION
}

func (m *EventSettleContract) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *EventSettleContract) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// EventCloseContract is emitted when a contract is closed or expires.
type EventCloseContract struct {
	ContractId uint64                                      `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Provider   github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,2,opt,name=provider,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"provider,omitempty"`
	Service    string                                      `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Client     github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,4,opt,name=client,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"client,omitempty"`
	Delegate   github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,5,opt,name=delegate,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"delegate,omitempty"`
}

func (m *EventCloseContract) Reset()         { *m = EventCloseContract{} }
func (m *EventCloseContract) String() string { return proto.CompactTextString(m) }
func (*EventCloseContract) ProtoMessage()    {}
func (*EventCloseContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_39b4417094f69f41, []int{4}
}
func (m *EventCloseContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCloseContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCloseContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCloseContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCloseContract.Merge(m, src)
}
func (m *EventCloseContract) XXX_Size() int {
	return m.Size()
}
func (m *EventCloseContract) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCloseContract.DiscardUnknown(m)
}

var xxx_messageInfo_EventCloseContract proto.InternalMessageInfo

func (m *EventCloseContract) GetContractId() uint64 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

func (m *EventCloseContract) GetProvider() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *EventCloseContract) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *EventCloseContract) GetClient() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *EventCloseContract) GetDelegate() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Delegate
	}
	return nil
}

// EventValidatorPayout is emitted when a validator receives a payout.
type EventValidatorPayout struct {
	Validator github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=validator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"validator,omitempty"`
	Reward    cosmossdk_io_math.Int                         `protobuf:"bytes,2,opt,name=reward,proto3,customtype=cosmossdk.io/math.Int" json:"reward"`
}

func (m *EventValidatorPayout) Reset()         { *m = EventValidatorPayout{} }
func (m *EventValidatorPayout) String() string { return proto.CompactTextString(m) }
func (*EventValidatorPayout) ProtoMessage()    {}
func (*EventValidatorPayout) Descriptor() ([]byte, []int) {
	return fileDescriptor_39b4417094f69f41, []int{5}
}
func (m *EventValidatorPayout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventValidatorPayout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventValidatorPayout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventValidatorPayout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventValidatorPayout.Merge(m, src)
}
func (m *EventValidatorPayout) XXX_Size() int {
	return m.Size()
}
func (m *EventValidatorPayout) XXX_DiscardUnknown() {
	xxx_messageInfo_EventValidatorPayout.DiscardUnknown(m)
}

var xxx_messageInfo_EventValidatorPayout proto.InternalMessageInfo

func (m *EventValidatorPayout) GetValidator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Validator
	}
	return nil
}

func init() {
	proto.RegisterType((*EventBondProvider)(nil), "arkeo.arkeo.EventBondProvider")
	proto.RegisterType((*EventModProvider)(nil), "arkeo.arkeo.EventModProvider")
	proto.RegisterType((*EventOpenContract)(nil), "arkeo.arkeo.EventOpenContract")
	proto.RegisterType((*EventSettleContract)(nil), "arkeo.arkeo.EventSettleContract")
	proto.RegisterType((*EventCloseContract)(nil), "arkeo.arkeo.EventCloseContract")
	proto.RegisterType((*EventValidatorPayout)(nil), "arkeo.arkeo.EventValidatorPayout")
}

func init() { proto.RegisterFile("arkeo/arkeo/events.proto", fileDescriptor_39b4417094f69f41) }

var fileDescriptor_39b4417094f69f41 = []byte{
	// 940 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0x36, 0x6d, 0x59, 0x92, 0x47, 0xb6, 0x7f, 0x7b, 0xed, 0xfc, 0xa0, 0x1d, 0x40, 0x52, 0x05,
	0x14, 0x10, 0xe0, 0x9a, 0x82, 0xed, 0x07, 0x08, 0x24, 0xd7, 0x4d, 0x0c, 0x37, 0x8d, 0xc1, 0xb4,
	0x05, 0xda, 0x0b, 0xb1, 0x22, 0x07, 0xd2, 0x42, 0x22, 0x97, 0xdd, 0x5d, 0x2a, 0x56, 0xaf, 0xbd,
	0xf5, 0xd4, 0x63, 0x1f, 0xa2, 0xa7, 0xa2, 0xa7, 0x3e, 0x41, 0x8e, 0x41, 0x4f, 0x45, 0x0f, 0x46,
	0x61, 0xbf, 0x45, 0x4e, 0x05, 0x97, 0x4b, 0x59, 0x4a, 0x82, 0x36, 0x12, 0xd2, 0xa2, 0x87, 0x5e,
	0x44, 0xee, 0xcc, 0x7c, 0xc3, 0xdd, 0x6f, 0xbe, 0x4f, 0x24, 0xd8, 0x54, 0x0c, 0x90, 0xb7, 0xb2,
	0x5f, 0x1c, 0x61, 0xa4, 0xa4, 0x13, 0x0b, 0xae, 0x38, 0xa9, 0xe8, 0x98, 0xa3, 0x7f, 0xf7, 0x77,
	0x7b, 0xbc, 0xc7, 0x75, 0xbc, 0x95, 0xde, 0x65, 0x25, 0xfb, 0x7b, 0x3e, 0x97, 0x21, 0x97, 0x5e,
	0x96, 0xc8, 0x16, 0x26, 0x55, 0xcd, 0x56, 0xad, 0x2e, 0x95, 0xd8, 0x1a, 0x1d, 0x75, 0x51, 0xd1,
	0xa3, 0x96, 0xcf, 0x59, 0x64, 0xf2, 0x33, 0xcf, 0x1d, 0x20, 0xc6, 0x28, 0xb2, 0x4c, 0xe3, 0xdb,
	0x65, 0xd8, 0x3e, 0x4b, 0x37, 0xd2, 0xe1, 0x51, 0x70, 0x29, 0xf8, 0x88, 0x05, 0x28, 0xc8, 0x05,
	0x94, 0x63, 0x73, 0x6f, 0x5b, 0x75, 0xab, 0xb9, 0xde, 0x69, 0xbd, 0xbc, 0xae, 0x1d, 0xf4, 0x98,
	0xea, 0x27, 0x5d, 0xc7, 0xe7, 0x61, 0xd6, 0x2a, 0x42, 0xf5, 0x8c, 0x8b, 0x81, 0xe9, 0xeb, 0xf3,
	0x30, 0xe4, 0x91, 0x73, 0x99, 0x74, 0x2f, 0x70, 0xec, 0x4e, 0x1a, 0x10, 0x1b, 0x4a, 0x12, 0xc5,
	0x88, 0xf9, 0x68, 0x2f, 0xd7, 0xad, 0xe6, 0x9a, 0x9b, 0x2f, 0xc9, 0x47, 0x50, 0xee, 0xf2, 0x28,
	0xf0, 0x04, 0x0e, 0xed, 0x95, 0x34, 0xd5, 0x39, 0x78, 0x7e, 0x5d, 0x5b, 0xfa, 0xed, 0xba, 0x76,
	0x2f, 0x3b, 0x90, 0x0c, 0x06, 0x0e, 0xe3, 0xad, 0x90, 0xaa, 0xbe, 0x73, 0x1e, 0xa9, 0x5f, 0x7e,
	0x3a, 0x04, 0x73, 0xee, 0xf3, 0x48, 0xb9, 0xa5, 0x14, 0xec, 0xe2, 0x70, 0xd2, 0x87, 0x76, 0xa5,
	0x5d, 0x58, 0xb0, 0x4f, 0xbb, 0x2b, 0x1b, 0x3f, 0xaf, 0xc2, 0x96, 0x26, 0xe3, 0x31, 0x9f, 0xe6,
	0xa2, 0xe4, 0x0b, 0xa4, 0x8a, 0xe7, 0x54, 0x1c, 0xbd, 0xbc, 0xae, 0x1d, 0x4e, 0x51, 0x61, 0xb8,
	0xcf, 0x2e, 0x87, 0x32, 0x18, 0xb4, 0xd4, 0x38, 0x46, 0xe9, 0xb4, 0x7d, 0xbf, 0x1d, 0x04, 0x02,
	0xa5, 0x74, 0xf3, 0x0e, 0x33, 0xc4, 0x2e, 0xbf, 0x43, 0x62, 0x57, 0x66, 0x89, 0x7d, 0x0f, 0xd6,
	0x43, 0x54, 0x34, 0xa0, 0x8a, 0x7a, 0x89, 0x60, 0x19, 0x29, 0x6e, 0x25, 0x8f, 0x7d, 0x26, 0x18,
	0x79, 0x1f, 0x36, 0x27, 0x25, 0x11, 0x8f, 0x7c, 0xb4, 0x57, 0xeb, 0x56, 0xb3, 0xe0, 0x6e, 0xe4,
	0xd1, 0x4f, 0xd2, 0x20, 0x39, 0x81, 0xa2, 0x54, 0x54, 0x25, 0xd2, 0x2e, 0xd6, 0xad, 0xe6, 0xe6,
	0xf1, 0x7d, 0x67, 0x4a, 0xa8, 0x4e, 0x4e, 0xd2, 0x53, 0x5d, 0xe2, 0x9a, 0x52, 0x72, 0x0c, 0xf7,
	0x42, 0x16, 0x79, 0x3e, 0x8f, 0x94, 0xa0, 0xbe, 0xf2, 0x82, 0x44, 0x50, 0xc5, 0x78, 0x64, 0x97,
	0xea, 0x56, 0x73, 0xc5, 0xdd, 0x09, 0x59, 0x74, 0x6a, 0x72, 0x1f, 0x9a, 0x94, 0xc6, 0xd0, 0xab,
	0x37, 0x60, 0xca, 0x06, 0x43, 0xaf, 0x5e, 0xc3, 0x7c, 0x0c, 0xdb, 0x32, 0xe9, 0x4a, 0x5f, 0xb0,
	0x38, 0x5d, 0x7b, 0x82, 0x2a, 0xb4, 0xd7, 0xea, 0x2b, 0xcd, 0xca, 0xf1, 0x9e, 0x63, 0x06, 0x9c,
	0x5a, 0xc2, 0x31, 0x96, 0x70, 0x4e, 0x39, 0x8b, 0x3a, 0x85, 0x54, 0x1b, 0xee, 0xd6, 0x34, 0xd2,
	0xa5, 0x0a, 0xc9, 0x05, 0x90, 0x98, 0x8e, 0x3d, 0x2a, 0xbd, 0x31, 0x4f, 0xbc, 0x1e, 0xcf, 0xda,
	0xc1, 0xdb, 0xb5, 0xdb, 0x8c, 0xe9, 0xb8, 0x2d, 0xbf, 0xe0, 0xc9, 0x43, 0xae, 0x9b, 0x3d, 0x80,
	0x42, 0xaa, 0x2a, 0xbb, 0x32, 0xbf, 0x1c, 0x35, 0x90, 0xb4, 0x60, 0x47, 0xa2, 0x52, 0x43, 0x0c,
	0x31, 0x9a, 0x62, 0x63, 0x5d, 0xb3, 0x41, 0xee, 0x52, 0x39, 0x19, 0x8d, 0x6f, 0x8a, 0xc6, 0xc9,
	0x4f, 0x62, 0x9c, 0xd0, 0xfb, 0x6e, 0x9d, 0x5c, 0x83, 0xca, 0x64, 0x3e, 0x2c, 0xd0, 0x02, 0x2e,
	0xb8, 0x90, 0x87, 0xce, 0x83, 0x3f, 0x51, 0xe4, 0x43, 0x28, 0xfa, 0x43, 0x86, 0x91, 0xd2, 0x5a,
	0x5c, 0x60, 0x17, 0x06, 0x9e, 0x1e, 0x28, 0xc0, 0x21, 0xf6, 0xd2, 0xd9, 0xac, 0x2e, 0x78, 0xa0,
	0xbc, 0x01, 0x39, 0x84, 0x42, 0xea, 0x55, 0xa3, 0xed, 0xbd, 0x19, 0x6d, 0xe7, 0x14, 0x7e, 0x3a,
	0x8e, 0xd1, 0xd5, 0x65, 0xe4, 0xff, 0x50, 0xec, 0x23, 0xeb, 0xf5, 0x95, 0x11, 0xb2, 0x59, 0x91,
	0x7d, 0x28, 0xbf, 0x22, 0xd7, 0xc9, 0x9a, 0x9c, 0x40, 0xc1, 0xc8, 0xd2, 0x7a, 0x1b, 0x1d, 0xe9,
	0x62, 0x72, 0x1f, 0xd6, 0x78, 0x8c, 0xa9, 0x83, 0xa4, 0xb2, 0x21, 0xeb, 0xc8, 0xf5, 0x58, 0xa5,
	0x22, 0x67, 0x50, 0x0a, 0x30, 0xe6, 0x92, 0xa9, 0x45, 0xd4, 0x95, 0x63, 0xe7, 0x16, 0x18, 0x79,
	0x04, 0x1b, 0x34, 0x51, 0x7d, 0x2e, 0xd8, 0xd7, 0x59, 0xe9, 0x86, 0x66, 0xad, 0xf1, 0x46, 0xd6,
	0xda, 0xd3, 0x95, 0xee, 0x2c, 0x90, 0x7c, 0x00, 0xe4, 0xab, 0x04, 0x05, 0x43, 0xe9, 0xc5, 0x28,
	0xbc, 0x90, 0x45, 0x89, 0x42, 0x7b, 0x53, 0x3f, 0x79, 0xcb, 0x64, 0x2e, 0x51, 0x3c, 0xd6, 0x71,
	0x72, 0x00, 0xdb, 0x53, 0x1b, 0x35, 0x03, 0xf8, 0x5f, 0x56, 0x7c, 0x97, 0x78, 0xa4, 0xe3, 0x8d,
	0xef, 0x0b, 0xb0, 0xa3, 0x5d, 0xf0, 0x54, 0x67, 0xfe, 0xf3, 0xc1, 0xdf, 0xe1, 0x83, 0x5d, 0x58,
	0xcd, 0x5e, 0x19, 0x99, 0x0d, 0xb2, 0xc5, 0x94, 0x3b, 0xca, 0x33, 0xee, 0x78, 0x00, 0x85, 0x98,
	0xb2, 0x40, 0x3b, 0x60, 0xde, 0xbf, 0xc2, 0x14, 0x98, 0x0a, 0x5e, 0x60, 0x4a, 0x20, 0x6a, 0x2f,
	0xcc, 0x2b, 0x78, 0x83, 0x6d, 0xfc, 0xb8, 0x0c, 0x44, 0x4b, 0xe3, 0x74, 0xc8, 0xe5, 0x9d, 0x32,
	0x5e, 0x19, 0xa6, 0xf5, 0xda, 0x30, 0xff, 0xa1, 0x77, 0xf6, 0xbf, 0x52, 0x19, 0x8d, 0x1f, 0x2c,
	0xd8, 0xd5, 0xa4, 0x7d, 0x4e, 0x87, 0x2c, 0x48, 0xbf, 0x61, 0x2e, 0xe9, 0x98, 0x27, 0x8a, 0x3c,
	0x81, 0xb5, 0x51, 0x1e, 0x5a, 0xfc, 0xc3, 0xe8, 0xae, 0x07, 0x39, 0x85, 0xa2, 0xc0, 0x67, 0x54,
	0x64, 0x7e, 0x9a, 0x73, 0xc8, 0x06, 0xda, 0x39, 0x7b, 0x7e, 0x53, 0xb5, 0x5e, 0xdc, 0x54, 0xad,
	0xdf, 0x6f, 0xaa, 0xd6, 0x77, 0xb7, 0xd5, 0xa5, 0x17, 0xb7, 0xd5, 0xa5, 0x5f, 0x6f, 0xab, 0x4b,
	0x5f, 0xfe, 0xc5, 0xf9, 0xaf, 0xcc, 0x55, 0xef, 0xb0, 0x5b, 0xd4, 0x1f, 0xc7, 0x27, 0x7f, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x16, 0x2f, 0xaf, 0x13, 0xb0, 0x0b, 0x00, 0x00,
}

func (m *EventBondProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBondProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBondProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BondAbs.Size()
		i -= size
		if _, err := m.BondAbs.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BondRel.Size()
		i -= size
		if _, err := m.BondRel.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventModProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventModProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventModProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SettlementDuration != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SettlementDuration))
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.Bond.Size()
		i -= size
		if _, err := m.Bond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.PayAsYouGoRate) > 0 {
		for iNdEx := len(m.PayAsYouGoRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PayAsYouGoRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.SubscriptionRate) > 0 {
		for iNdEx := len(m.SubscriptionRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubscriptionRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.MaxContractDuration != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.MaxContractDuration))
		i--
		dAtA[i] = 0x40
	}
	if m.MinContractDuration != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.MinContractDuration))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.MetadataNonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.MetadataNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOpenContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOpenContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOpenContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SettlementHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SettlementHeight))
		i--
		dAtA[i] = 0x78
	}
	if m.QueriesPerMinute != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.QueriesPerMinute))
		i--
		dAtA[i] = 0x70
	}
	if m.Authorization != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Authorization))
		i--
		dAtA[i] = 0x68
	}
	if m.SettlementDuration != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SettlementDuration))
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.OpenCost != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OpenCost))
		i--
		dAtA[i] = 0x50
	}
	{
		size, err := m.Rate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Duration != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x40
	}
	if m.Height != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x38
	}
	if m.Type != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ContractId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ContractId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSettleContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSettleContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSettleContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Reserve.Size()
		i -= size
		if _, err := m.Reserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.Paid.Size()
		i -= size
		if _, err := m.Paid.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Height != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x40
	}
	if m.Nonce != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x38
	}
	if m.Type != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ContractId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ContractId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCloseContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCloseContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCloseContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if m.ContractId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ContractId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventValidatorPayout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventValidatorPayout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventValidatorPayout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Reward.Size()
		i -= size
		if _, err := m.Reward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventBondProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.BondRel.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.BondAbs.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventModProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.MetadataNonce != 0 {
		n += 1 + sovEvents(uint64(m.MetadataNonce))
	}
	if m.Status != 0 {
		n += 1 + sovEvents(uint64(m.Status))
	}
	if m.MinContractDuration != 0 {
		n += 1 + sovEvents(uint64(m.MinContractDuration))
	}
	if m.MaxContractDuration != 0 {
		n += 1 + sovEvents(uint64(m.MaxContractDuration))
	}
	if len(m.SubscriptionRate) > 0 {
		for _, e := range m.SubscriptionRate {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if len(m.PayAsYouGoRate) > 0 {
		for _, e := range m.PayAsYouGoRate {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = m.Bond.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.SettlementDuration != 0 {
		n += 1 + sovEvents(uint64(m.SettlementDuration))
	}
	return n
}

func (m *EventOpenContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ContractId != 0 {
		n += 1 + sovEvents(uint64(m.ContractId))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovEvents(uint64(m.Type))
	}
	if m.Height != 0 {
		n += 1 + sovEvents(uint64(m.Height))
	}
	if m.Duration != 0 {
		n += 1 + sovEvents(uint64(m.Duration))
	}
	l = m.Rate.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.OpenCost != 0 {
		n += 1 + sovEvents(uint64(m.OpenCost))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.SettlementDuration != 0 {
		n += 1 + sovEvents(uint64(m.SettlementDuration))
	}
	if m.Authorization != 0 {
		n += 1 + sovEvents(uint64(m.Authorization))
	}
	if m.QueriesPerMinute != 0 {
		n += 1 + sovEvents(uint64(m.QueriesPerMinute))
	}
	if m.SettlementHeight != 0 {
		n += 1 + sovEvents(uint64(m.SettlementHeight))
	}
	return n
}

func (m *EventSettleContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ContractId != 0 {
		n += 1 + sovEvents(uint64(m.ContractId))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovEvents(uint64(m.Type))
	}
	if m.Nonce != 0 {
		n += 1 + sovEvents(uint64(m.Nonce))
	}
	if m.Height != 0 {
		n += 1 + sovEvents(uint64(m.Height))
	}
	l = m.Paid.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Reserve.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventCloseContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractId != 0 {
		n += 1 + sovEvents(uint64(m.ContractId))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventValidatorPayout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Reward.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventBondProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBondProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBondProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider[:0], dAtA[iNdEx:postIndex]...)
			if m.Provider == nil {
				m.Provider = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondRel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondRel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondAbs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondAbs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventModProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventModProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventModProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider[:0], dAtA[iNdEx:postIndex]...)
			if m.Provider == nil {
				m.Provider = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataNonce", wireType)
			}
			m.MetadataNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProviderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinContractDuration", wireType)
			}
			m.MinContractDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinContractDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxContractDuration", wireType)
			}
			m.MaxContractDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxContractDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRate = append(m.SubscriptionRate, types.Coin{})
			if err := m.SubscriptionRate[len(m.SubscriptionRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayAsYouGoRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayAsYouGoRate = append(m.PayAsYouGoRate, types.Coin{})
			if err := m.PayAsYouGoRate[len(m.PayAsYouGoRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementDuration", wireType)
			}
			m.SettlementDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOpenContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOpenContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOpenContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider[:0], dAtA[iNdEx:postIndex]...)
			if m.Provider == nil {
				m.Provider = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			m.ContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = append(m.Client[:0], dAtA[iNdEx:postIndex]...)
			if m.Client == nil {
				m.Client = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = append(m.Delegate[:0], dAtA[iNdEx:postIndex]...)
			if m.Delegate == nil {
				m.Delegate = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ContractType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenCost", wireType)
			}
			m.OpenCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenCost |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementDuration", wireType)
			}
			m.SettlementDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorization", wireType)
			}
			m.Authorization = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Authorization |= ContractAuthorization(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueriesPerMinute", wireType)
			}
			m.QueriesPerMinute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueriesPerMinute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementHeight", wireType)
			}
			m.SettlementHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSettleContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSettleContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSettleContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider[:0], dAtA[iNdEx:postIndex]...)
			if m.Provider == nil {
				m.Provider = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			m.ContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = append(m.Client[:0], dAtA[iNdEx:postIndex]...)
			if m.Client == nil {
				m.Client = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = append(m.Delegate[:0], dAtA[iNdEx:postIndex]...)
			if m.Delegate == nil {
				m.Delegate = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ContractType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Paid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCloseContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCloseContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCloseContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			m.ContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider[:0], dAtA[iNdEx:postIndex]...)
			if m.Provider == nil {
				m.Provider = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = append(m.Client[:0], dAtA[iNdEx:postIndex]...)
			if m.Client == nil {
				m.Client = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = append(m.Delegate[:0], dAtA[iNdEx:postIndex]...)
			if m.Delegate == nil {
				m.Delegate = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventValidatorPayout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventValidatorPayout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventValidatorPayout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = append(m.Validator[:0], dAtA[iNdEx:postIndex]...)
			if m.Validator == nil {
				m.Validator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
