// DONTCOVER
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: arkeo/arkeo/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_arkeonetwork_arkeo_common "github.com/arkeonetwork/arkeo/common"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgBondProvider is used to bond a provider.
type MsgBondProvider struct {
	Creator  string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Provider string                `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Service  string                `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Bond     cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=bond,proto3,customtype=cosmossdk.io/math.Int" json:"bond"`
}

func (m *MsgBondProvider) Reset()         { *m = MsgBondProvider{} }
func (m *MsgBondProvider) String() string { return proto.CompactTextString(m) }
func (*MsgBondProvider) ProtoMessage()    {}
func (*MsgBondProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{0}
}
func (m *MsgBondProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBondProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBondProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBondProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBondProvider.Merge(m, src)
}
func (m *MsgBondProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgBondProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBondProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBondProvider proto.InternalMessageInfo

func (m *MsgBondProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBondProvider) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *MsgBondProvider) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

// MsgBondProviderResponse is the response for MsgBondProvider.
type MsgBondProviderResponse struct {
}

func (m *MsgBondProviderResponse) Reset()         { *m = MsgBondProviderResponse{} }
func (m *MsgBondProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBondProviderResponse) ProtoMessage()    {}
func (*MsgBondProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{1}
}
func (m *MsgBondProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBondProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBondProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBondProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBondProviderResponse.Merge(m, src)
}
func (m *MsgBondProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBondProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBondProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBondProviderResponse proto.InternalMessageInfo

// MsgModProvider is used to modify provider details.
type MsgModProvider struct {
	Creator             string                                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Provider            github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,2,opt,name=provider,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"provider,omitempty"`
	Service             string                                      `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	MetadataUri         string                                      `protobuf:"bytes,4,opt,name=metadata_uri,json=metadataUri,proto3" json:"metadata_uri,omitempty"`
	MetadataNonce       uint64                                      `protobuf:"varint,5,opt,name=metadata_nonce,json=metadataNonce,proto3" json:"metadata_nonce,omitempty"`
	Status              ProviderStatus                              `protobuf:"varint,6,opt,name=status,proto3,enum=arkeo.arkeo.ProviderStatus" json:"status,omitempty"`
	MinContractDuration int64                                       `protobuf:"varint,7,opt,name=min_contract_duration,json=minContractDuration,proto3" json:"min_contract_duration,omitempty"`
	MaxContractDuration int64                                       `protobuf:"varint,8,opt,name=max_contract_duration,json=maxContractDuration,proto3" json:"max_contract_duration,omitempty"`
	SubscriptionRate    []types.Coin                                `protobuf:"bytes,9,rep,name=subscription_rate,json=subscriptionRate,proto3" json:"subscription_rate"`
	PayAsYouGoRate      []types.Coin                                `protobuf:"bytes,10,rep,name=pay_as_you_go_rate,json=payAsYouGoRate,proto3" json:"pay_as_you_go_rate"`
	SettlementDuration  int64                                       `protobuf:"varint,11,opt,name=settlement_duration,json=settlementDuration,proto3" json:"settlement_duration,omitempty"`
}

func (m *MsgModProvider) Reset()         { *m = MsgModProvider{} }
func (m *MsgModProvider) String() string { return proto.CompactTextString(m) }
func (*MsgModProvider) ProtoMessage()    {}
func (*MsgModProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{2}
}
func (m *MsgModProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModProvider.Merge(m, src)
}
func (m *MsgModProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgModProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModProvider proto.InternalMessageInfo

func (m *MsgModProvider) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgModProvider) GetProvider() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *MsgModProvider) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *MsgModProvider) GetMetadataUri() string {
	if m != nil {
		return m.MetadataUri
	}
	return ""
}

func (m *MsgModProvider) GetMetadataNonce() uint64 {
	if m != nil {
		return m.MetadataNonce
	}
	return 0
}

func (m *MsgModProvider) GetStatus() ProviderStatus {
	if m != nil {
		return m.Status
	}
	return ProviderStatus_OFFLINE
}

func (m *MsgModProvider) GetMinContractDuration() int64 {
	if m != nil {
		return m.MinContractDuration
	}
	return 0
}

func (m *MsgModProvider) GetMaxContractDuration() int64 {
	if m != nil {
		return m.MaxContractDuration
	}
	return 0
}

func (m *MsgModProvider) GetSubscriptionRate() []types.Coin {
	if m != nil {
		return m.SubscriptionRate
	}
	return nil
}

func (m *MsgModProvider) GetPayAsYouGoRate() []types.Coin {
	if m != nil {
		return m.PayAsYouGoRate
	}
	return nil
}

func (m *MsgModProvider) GetSettlementDuration() int64 {
	if m != nil {
		return m.SettlementDuration
	}
	return 0
}

// MsgModProviderResponse is the response for MsgModProvider.
type MsgModProviderResponse struct {
}

func (m *MsgModProviderResponse) Reset()         { *m = MsgModProviderResponse{} }
func (m *MsgModProviderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgModProviderResponse) ProtoMessage()    {}
func (*MsgModProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{3}
}
func (m *MsgModProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModProviderResponse.Merge(m, src)
}
func (m *MsgModProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgModProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModProviderResponse proto.InternalMessageInfo

// MsgOpenContract is used to open a new contract between a client and provider.
type MsgOpenContract struct {
	Creator            string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Provider           string                `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Service            string                `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	Client             string                `protobuf:"bytes,4,opt,name=client,proto3" json:"client,omitempty"`
	Delegate           string                `protobuf:"bytes,5,opt,name=delegate,proto3" json:"delegate,omitempty"`
	ContractType       ContractType          `protobuf:"varint,6,opt,name=contract_type,json=contractType,proto3,enum=arkeo.arkeo.ContractType" json:"contract_type,omitempty"`
	Duration           int64                 `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Rate               types.Coin            `protobuf:"bytes,8,opt,name=rate,proto3" json:"rate"`
	Deposit            cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=deposit,proto3,customtype=cosmossdk.io/math.Int" json:"deposit"`
	SettlementDuration int64                 `protobuf:"varint,10,opt,name=settlement_duration,json=settlementDuration,proto3" json:"settlement_duration,omitempty"`
	Authorization      ContractAuthorization `protobuf:"varint,11,opt,name=authorization,proto3,enum=arkeo.arkeo.ContractAuthorization" json:"authorization,omitempty"`
	QueriesPerMinute   int64                 `protobuf:"varint,12,opt,name=queries_per_minute,json=queriesPerMinute,proto3" json:"queries_per_minute,omitempty"`
}

func (m *MsgOpenContract) Reset()         { *m = MsgOpenContract{} }
func (m *MsgOpenContract) String() string { return proto.CompactTextString(m) }
func (*MsgOpenContract) ProtoMessage()    {}
func (*MsgOpenContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{4}
}
func (m *MsgOpenContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenContract.Merge(m, src)
}
func (m *MsgOpenContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenContract proto.InternalMessageInfo

func (m *MsgOpenContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgOpenContract) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *MsgOpenContract) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *MsgOpenContract) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *MsgOpenContract) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

func (m *MsgOpenContract) GetContractType() ContractType {
	if m != nil {
		return m.ContractType
	}
	return ContractType_SUBSCRIPTION
}

func (m *MsgOpenContract) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgOpenContract) GetRate() types.Coin {
	if m != nil {
		return m.Rate
	}
	return types.Coin{}
}

func (m *MsgOpenContract) GetSettlementDuration() int64 {
	if m != nil {
		return m.SettlementDuration
	}
	return 0
}

func (m *MsgOpenContract) GetAuthorization() ContractAuthorization {
	if m != nil {
		return m.Authorization
	}
	return ContractAuthorization_STRICT
}

func (m *MsgOpenContract) GetQueriesPerMinute() int64 {
	if m != nil {
		return m.QueriesPerMinute
	}
	return 0
}

// MsgOpenContractResponse is the response for MsgOpenContract.
type MsgOpenContractResponse struct {
}

func (m *MsgOpenContractResponse) Reset()         { *m = MsgOpenContractResponse{} }
func (m *MsgOpenContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOpenContractResponse) ProtoMessage()    {}
func (*MsgOpenContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{5}
}
func (m *MsgOpenContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenContractResponse.Merge(m, src)
}
func (m *MsgOpenContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenContractResponse proto.InternalMessageInfo

// MsgCloseContract is used to close an existing contract.
type MsgCloseContract struct {
	Creator    string                                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ContractId uint64                                      `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Client     github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,3,opt,name=client,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"client,omitempty"`
	Delegate   github_com_arkeonetwork_arkeo_common.PubKey `protobuf:"bytes,4,opt,name=delegate,proto3,casttype=github.com/arkeonetwork/arkeo/common.PubKey" json:"delegate,omitempty"`
}

func (m *MsgCloseContract) Reset()         { *m = MsgCloseContract{} }
func (m *MsgCloseContract) String() string { return proto.CompactTextString(m) }
func (*MsgCloseContract) ProtoMessage()    {}
func (*MsgCloseContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{6}
}
func (m *MsgCloseContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseContract.Merge(m, src)
}
func (m *MsgCloseContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseContract proto.InternalMessageInfo

func (m *MsgCloseContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCloseContract) GetContractId() uint64 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

func (m *MsgCloseContract) GetClient() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *MsgCloseContract) GetDelegate() github_com_arkeonetwork_arkeo_common.PubKey {
	if m != nil {
		return m.Delegate
	}
	return nil
}

// MsgCloseContractResponse is the response for MsgCloseContract.
type MsgCloseContractResponse struct {
}

func (m *MsgCloseContractResponse) Reset()         { *m = MsgCloseContractResponse{} }
func (m *MsgCloseContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCloseContractResponse) ProtoMessage()    {}
func (*MsgCloseContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{7}
}
func (m *MsgCloseContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseContractResponse.Merge(m, src)
}
func (m *MsgCloseContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseContractResponse proto.InternalMessageInfo

// MsgClaimContractIncome is used by a provider to claim contract income.
type MsgClaimContractIncome struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ContractId uint64 `protobuf:"varint,2,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Signature  []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Nonce      int64  `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgClaimContractIncome) Reset()         { *m = MsgClaimContractIncome{} }
func (m *MsgClaimContractIncome) String() string { return proto.CompactTextString(m) }
func (*MsgClaimContractIncome) ProtoMessage()    {}
func (*MsgClaimContractIncome) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{8}
}
func (m *MsgClaimContractIncome) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimContractIncome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimContractIncome.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimContractIncome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimContractIncome.Merge(m, src)
}
func (m *MsgClaimContractIncome) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimContractIncome) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimContractIncome.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimContractIncome proto.InternalMessageInfo

func (m *MsgClaimContractIncome) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClaimContractIncome) GetContractId() uint64 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

func (m *MsgClaimContractIncome) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *MsgClaimContractIncome) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// MsgClaimContractIncomeResponse is the response for MsgClaimContractIncome.
type MsgClaimContractIncomeResponse struct {
}

func (m *MsgClaimContractIncomeResponse) Reset()         { *m = MsgClaimContractIncomeResponse{} }
func (m *MsgClaimContractIncomeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimContractIncomeResponse) ProtoMessage()    {}
func (*MsgClaimContractIncomeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{9}
}
func (m *MsgClaimContractIncomeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimContractIncomeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimContractIncomeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimContractIncomeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimContractIncomeResponse.Merge(m, src)
}
func (m *MsgClaimContractIncomeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimContractIncomeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimContractIncomeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimContractIncomeResponse proto.InternalMessageInfo

// MsgSetVersion is used to set the chain version.
// this line is used by starport scaffolding # proto/tx/message
type MsgSetVersion struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *MsgSetVersion) Reset()         { *m = MsgSetVersion{} }
func (m *MsgSetVersion) String() string { return proto.CompactTextString(m) }
func (*MsgSetVersion) ProtoMessage()    {}
func (*MsgSetVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{10}
}
func (m *MsgSetVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetVersion.Merge(m, src)
}
func (m *MsgSetVersion) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetVersion.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetVersion proto.InternalMessageInfo

func (m *MsgSetVersion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetVersion) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// MsgSetVersionResponse is the response for MsgSetVersion.
type MsgSetVersionResponse struct {
}

func (m *MsgSetVersionResponse) Reset()         { *m = MsgSetVersionResponse{} }
func (m *MsgSetVersionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetVersionResponse) ProtoMessage()    {}
func (*MsgSetVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a12700967a3e4015, []int{11}
}
func (m *MsgSetVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetVersionResponse.Merge(m, src)
}
func (m *MsgSetVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetVersionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgBondProvider)(nil), "arkeo.arkeo.MsgBondProvider")
	proto.RegisterType((*MsgBondProviderResponse)(nil), "arkeo.arkeo.MsgBondProviderResponse")
	proto.RegisterType((*MsgModProvider)(nil), "arkeo.arkeo.MsgModProvider")
	proto.RegisterType((*MsgModProviderResponse)(nil), "arkeo.arkeo.MsgModProviderResponse")
	proto.RegisterType((*MsgOpenContract)(nil), "arkeo.arkeo.MsgOpenContract")
	proto.RegisterType((*MsgOpenContractResponse)(nil), "arkeo.arkeo.MsgOpenContractResponse")
	proto.RegisterType((*MsgCloseContract)(nil), "arkeo.arkeo.MsgCloseContract")
	proto.RegisterType((*MsgCloseContractResponse)(nil), "arkeo.arkeo.MsgCloseContractResponse")
	proto.RegisterType((*MsgClaimContractIncome)(nil), "arkeo.arkeo.MsgClaimContractIncome")
	proto.RegisterType((*MsgClaimContractIncomeResponse)(nil), "arkeo.arkeo.MsgClaimContractIncomeResponse")
	proto.RegisterType((*MsgSetVersion)(nil), "arkeo.arkeo.MsgSetVersion")
	proto.RegisterType((*MsgSetVersionResponse)(nil), "arkeo.arkeo.MsgSetVersionResponse")
}

func init() { proto.RegisterFile("arkeo/arkeo/tx.proto", fileDescriptor_a12700967a3e4015) }

var fileDescriptor_a12700967a3e4015 = []byte{
	// 1085 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x4f, 0xdc, 0x46,
	0x14, 0xc6, 0xd9, 0x05, 0xc2, 0xec, 0x42, 0xc9, 0x00, 0xc1, 0x2c, 0x64, 0xd9, 0x6e, 0x12, 0x09,
	0x41, 0xf0, 0x8a, 0x45, 0xbd, 0x70, 0x68, 0x05, 0x34, 0x4a, 0x11, 0xd9, 0x06, 0x99, 0xa6, 0x52,
	0x7b, 0x59, 0xcd, 0xda, 0x23, 0x33, 0x02, 0xcf, 0xb8, 0x33, 0x63, 0xca, 0xf6, 0x54, 0xf5, 0xd8,
	0xaa, 0x52, 0xa5, 0xfe, 0x8f, 0x8a, 0x43, 0x7e, 0x44, 0x8e, 0x51, 0x4e, 0x51, 0x0f, 0x28, 0x82,
	0x03, 0x97, 0xfe, 0x82, 0x9e, 0x2a, 0xdb, 0x63, 0xaf, 0xed, 0x5d, 0x28, 0x49, 0xd4, 0x5e, 0xbc,
	0xfb, 0xde, 0xf7, 0xde, 0x9b, 0xf7, 0x3e, 0x7f, 0x33, 0x1e, 0x30, 0x8d, 0xf8, 0x21, 0x66, 0x8d,
	0xe8, 0x29, 0x4f, 0x0c, 0x8f, 0x33, 0xc9, 0x60, 0x29, 0xb4, 0x8d, 0xf0, 0x59, 0x99, 0x76, 0x98,
	0xc3, 0x42, 0x7f, 0x23, 0xf8, 0x17, 0x85, 0x54, 0xe6, 0x2c, 0x26, 0x5c, 0x26, 0xda, 0x11, 0x10,
	0x19, 0x0a, 0xaa, 0x46, 0x56, 0xa3, 0x83, 0x04, 0x6e, 0x1c, 0xaf, 0x75, 0xb0, 0x44, 0x6b, 0x0d,
	0x8b, 0x11, 0xaa, 0x70, 0x3d, 0xbd, 0xe6, 0x21, 0xc6, 0x1e, 0xe6, 0x0a, 0x99, 0x55, 0x99, 0xae,
	0x70, 0x1a, 0xc7, 0x6b, 0xc1, 0x8f, 0x02, 0xee, 0x20, 0x97, 0x50, 0xd6, 0x08, 0x9f, 0x91, 0xab,
	0xfe, 0x97, 0x06, 0x3e, 0x6a, 0x09, 0x67, 0x8b, 0x51, 0x7b, 0x8f, 0xb3, 0x63, 0x62, 0x63, 0x0e,
	0x9b, 0x60, 0xd4, 0xe2, 0x18, 0x49, 0xc6, 0x75, 0xad, 0xa6, 0x2d, 0x8d, 0x6d, 0xe9, 0xaf, 0x5f,
	0xac, 0x4e, 0xab, 0xe6, 0x36, 0x6d, 0x9b, 0x63, 0x21, 0xf6, 0x25, 0x27, 0xd4, 0x31, 0xe3, 0x40,
	0x58, 0x01, 0xb7, 0x3d, 0x95, 0xaf, 0xdf, 0x0a, 0x92, 0xcc, 0xc4, 0x86, 0x3a, 0x18, 0x15, 0x98,
	0x1f, 0x13, 0x0b, 0xeb, 0x85, 0x10, 0x8a, 0x4d, 0xf8, 0x19, 0x28, 0x76, 0x18, 0xb5, 0xf5, 0x62,
	0xb8, 0xcc, 0xca, 0xcb, 0xb3, 0xc5, 0xa1, 0x3f, 0xcf, 0x16, 0x67, 0xa2, 0xa5, 0x84, 0x7d, 0x68,
	0x10, 0xd6, 0x70, 0x91, 0x3c, 0x30, 0x76, 0xa8, 0x7c, 0xfd, 0x62, 0x15, 0xa8, 0x1e, 0x76, 0xa8,
	0x34, 0xc3, 0xc4, 0x0d, 0xe3, 0xa7, 0xcb, 0xd3, 0xe5, 0xb8, 0x89, 0x9f, 0x2f, 0x4f, 0x97, 0xef,
	0x45, 0x7c, 0x9c, 0x28, 0x5e, 0x72, 0xa3, 0xd5, 0xe7, 0xc0, 0x6c, 0xce, 0x65, 0x62, 0xe1, 0x31,
	0x2a, 0x70, 0xfd, 0xd7, 0x61, 0x30, 0xd1, 0x12, 0x4e, 0x8b, 0x7d, 0x18, 0x11, 0xbb, 0x39, 0x22,
	0xca, 0x5b, 0x8d, 0xbf, 0xcf, 0x16, 0x57, 0x1c, 0x22, 0x0f, 0xfc, 0x8e, 0x61, 0x31, 0x37, 0xea,
	0x8c, 0x62, 0xf9, 0x3d, 0xe3, 0x87, 0xaa, 0x4d, 0x8b, 0xb9, 0x2e, 0xa3, 0xc6, 0x9e, 0xdf, 0xd9,
	0xc5, 0xdd, 0x1b, 0x31, 0xf7, 0x31, 0x28, 0xbb, 0x58, 0x22, 0x1b, 0x49, 0xd4, 0xf6, 0x39, 0x89,
	0x18, 0x34, 0x4b, 0xb1, 0xef, 0x39, 0x27, 0xf0, 0x21, 0x98, 0x48, 0x42, 0x28, 0xa3, 0x16, 0xd6,
	0x87, 0x6b, 0xda, 0x52, 0xd1, 0x1c, 0x8f, 0xbd, 0x5f, 0x06, 0x4e, 0xb8, 0x0e, 0x46, 0x84, 0x44,
	0xd2, 0x17, 0xfa, 0x48, 0x4d, 0x5b, 0x9a, 0x68, 0xce, 0x1b, 0x29, 0xd9, 0x1a, 0x31, 0x17, 0xfb,
	0x61, 0x88, 0xa9, 0x42, 0x61, 0x13, 0xcc, 0xb8, 0x84, 0xb6, 0x2d, 0x46, 0x25, 0x47, 0x96, 0x6c,
	0xdb, 0x3e, 0x47, 0x92, 0x30, 0xaa, 0x8f, 0xd6, 0xb4, 0xa5, 0x82, 0x39, 0xe5, 0x12, 0xba, 0xad,
	0xb0, 0xcf, 0x15, 0x14, 0xe6, 0xa0, 0x93, 0x01, 0x39, 0xb7, 0x55, 0x0e, 0x3a, 0xe9, 0xcb, 0x79,
	0x0a, 0xee, 0x08, 0xbf, 0x23, 0x2c, 0x4e, 0xbc, 0xc0, 0x6e, 0x73, 0x24, 0xb1, 0x3e, 0x56, 0x2b,
	0x2c, 0x95, 0x9a, 0x73, 0x86, 0x7a, 0x11, 0xc1, 0x06, 0x31, 0xd4, 0x06, 0x31, 0xb6, 0x19, 0xa1,
	0x5b, 0xc5, 0x40, 0x48, 0xe6, 0x64, 0x3a, 0xd3, 0x44, 0x12, 0xc3, 0x5d, 0x00, 0x3d, 0xd4, 0x6d,
	0x23, 0xd1, 0xee, 0x32, 0xbf, 0xed, 0xb0, 0xa8, 0x1c, 0xb8, 0x59, 0xb9, 0x09, 0x0f, 0x75, 0x37,
	0xc5, 0x37, 0xcc, 0x7f, 0xc2, 0xc2, 0x62, 0x0d, 0x30, 0x25, 0xb0, 0x94, 0x47, 0xd8, 0xc5, 0x34,
	0x35, 0x4c, 0x29, 0x1c, 0x06, 0xf6, 0xa0, 0x78, 0x96, 0x8d, 0xd5, 0xbc, 0x56, 0x17, 0xfa, 0xb4,
	0x9a, 0x12, 0x5f, 0x5d, 0x07, 0x77, 0xb3, 0x9e, 0x44, 0xa9, 0x6f, 0x8b, 0xe1, 0x9e, 0x7d, 0xe6,
	0xe1, 0x84, 0xe4, 0xff, 0x71, 0xcf, 0xde, 0x05, 0x23, 0xd6, 0x11, 0xc1, 0x54, 0x2a, 0xcd, 0x29,
	0x2b, 0xa8, 0x66, 0xe3, 0x23, 0xec, 0x04, 0x94, 0x0e, 0x47, 0xd5, 0x62, 0x1b, 0x7e, 0x0a, 0xc6,
	0x93, 0xd7, 0x2e, 0xbb, 0x1e, 0x56, 0x52, 0x9b, 0xcb, 0x48, 0x2d, 0x9e, 0xe5, 0xab, 0xae, 0x87,
	0xcd, 0xb2, 0x95, 0xb2, 0xc2, 0xda, 0x59, 0x85, 0x25, 0x36, 0x5c, 0x07, 0xc5, 0xf0, 0x35, 0x06,
	0x2a, 0xba, 0xc1, 0x6b, 0x0c, 0x83, 0xe1, 0x63, 0x30, 0x6a, 0x63, 0x8f, 0x09, 0x22, 0xf5, 0xb1,
	0x77, 0x3f, 0x7b, 0xe2, 0xdc, 0xab, 0x34, 0x00, 0xae, 0xd2, 0x00, 0xfc, 0x02, 0x8c, 0x23, 0x5f,
	0x1e, 0x30, 0x4e, 0x7e, 0xe8, 0xc9, 0x65, 0xa2, 0x59, 0x1f, 0x48, 0xc4, 0x66, 0x3a, 0xd2, 0xcc,
	0x26, 0xc2, 0x47, 0x00, 0x7e, 0xe7, 0x63, 0x4e, 0xb0, 0x68, 0x7b, 0x98, 0xb7, 0x5d, 0x42, 0x7d,
	0x89, 0xf5, 0x72, 0xb8, 0xf2, 0xa4, 0x42, 0xf6, 0x30, 0x6f, 0x85, 0xfe, 0x9b, 0x9c, 0x93, 0x69,
	0x39, 0xa9, 0x73, 0x32, 0xed, 0x4a, 0xd4, 0xf7, 0xc7, 0x2d, 0x30, 0xd9, 0x12, 0xce, 0xf6, 0x11,
	0x13, 0xf8, 0x83, 0xe4, 0xb7, 0x08, 0x4a, 0x89, 0x28, 0x88, 0x1d, 0x2a, 0xb0, 0x68, 0x82, 0xd8,
	0xb5, 0x63, 0xc3, 0x27, 0x89, 0xd2, 0x0a, 0xef, 0x77, 0x90, 0xc6, 0xd2, 0xdc, 0x4d, 0x49, 0xb3,
	0xf8, 0x9e, 0x67, 0x72, 0x5c, 0x60, 0xa3, 0x91, 0xa7, 0xb2, 0xda, 0x47, 0x65, 0x86, 0x9b, 0x7a,
	0x05, 0xe8, 0x79, 0x5f, 0x42, 0xe6, 0x1b, 0x2d, 0xdc, 0xe5, 0xdb, 0x47, 0x88, 0xb8, 0x31, 0xb8,
	0x43, 0x2d, 0xe6, 0xe2, 0xff, 0x86, 0xd2, 0x05, 0x30, 0x26, 0x88, 0x43, 0x91, 0xf4, 0xb9, 0xa2,
	0xc2, 0xec, 0x39, 0xe0, 0x34, 0x18, 0xee, 0x7d, 0x28, 0x0a, 0x66, 0x64, 0x6c, 0x7c, 0x92, 0x1f,
	0xf8, 0xc1, 0x80, 0x81, 0xfb, 0xfa, 0xaf, 0xd7, 0x40, 0x75, 0x30, 0x92, 0x0c, 0xff, 0x8b, 0x06,
	0xc6, 0x5b, 0xc2, 0xd9, 0xc7, 0xf2, 0x6b, 0xcc, 0x45, 0xf4, 0x89, 0x78, 0xf7, 0x99, 0x75, 0x30,
	0x7a, 0x1c, 0xa5, 0x87, 0xf3, 0x16, 0xcc, 0xd8, 0xdc, 0x78, 0x94, 0x6f, 0x7c, 0xbe, 0xaf, 0xf1,
	0xde, 0xda, 0xf5, 0x59, 0x30, 0x93, 0x71, 0xc4, 0x6d, 0x36, 0x7f, 0x2f, 0x82, 0x42, 0x4b, 0x38,
	0xd0, 0x04, 0xe5, 0xcc, 0x35, 0x69, 0x21, 0xb3, 0x69, 0x73, 0xd7, 0x8a, 0xca, 0x83, 0xeb, 0xd0,
	0xb8, 0x36, 0x7c, 0x06, 0x4a, 0xe9, 0x0b, 0xc7, 0x7c, 0x3e, 0x29, 0x05, 0x56, 0xee, 0x5f, 0x03,
	0x26, 0x05, 0x4d, 0x50, 0xce, 0x7c, 0x17, 0xfa, 0x9a, 0x4c, 0xa3, 0xfd, 0x4d, 0x0e, 0xda, 0xf1,
	0xf0, 0x39, 0x18, 0xcf, 0xee, 0xf6, 0x7b, 0xf9, 0xb4, 0x0c, 0x5c, 0x79, 0x78, 0x2d, 0x9c, 0x94,
	0x75, 0xc0, 0xd4, 0x20, 0xdd, 0xdf, 0xef, 0xcf, 0xee, 0x0b, 0xaa, 0xac, 0xdc, 0x20, 0x28, 0x59,
	0xe8, 0x29, 0x00, 0x29, 0x8d, 0x55, 0xf2, 0xa9, 0x3d, 0xac, 0x52, 0xbf, 0x1a, 0x8b, 0xab, 0x55,
	0x86, 0x7f, 0xbc, 0x3c, 0x5d, 0xd6, 0xb6, 0x1e, 0xbf, 0x3c, 0xaf, 0x6a, 0xaf, 0xce, 0xab, 0xda,
	0xdb, 0xf3, 0xaa, 0xf6, 0xdb, 0x45, 0x75, 0xe8, 0xd5, 0x45, 0x75, 0xe8, 0xcd, 0x45, 0x75, 0xe8,
	0xdb, 0x7f, 0x39, 0x57, 0x62, 0xf5, 0x05, 0xdf, 0x41, 0xd1, 0x19, 0x09, 0xaf, 0xe1, 0xeb, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xde, 0x1f, 0x86, 0xaf, 0x42, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// BondProvider creates or updates a provider bond.
	BondProvider(ctx context.Context, in *MsgBondProvider, opts ...grpc.CallOption) (*MsgBondProviderResponse, error)
	// ModProvider modifies provider details.
	ModProvider(ctx context.Context, in *MsgModProvider, opts ...grpc.CallOption) (*MsgModProviderResponse, error)
	// OpenContract opens a contract between a client and provider.
	OpenContract(ctx context.Context, in *MsgOpenContract, opts ...grpc.CallOption) (*MsgOpenContractResponse, error)
	// CloseContract closes an existing contract.
	CloseContract(ctx context.Context, in *MsgCloseContract, opts ...grpc.CallOption) (*MsgCloseContractResponse, error)
	// ClaimContractIncome allows a provider to claim contract income.
	ClaimContractIncome(ctx context.Context, in *MsgClaimContractIncome, opts ...grpc.CallOption) (*MsgClaimContractIncomeResponse, error)
	// SetVersion sets the chain version.
	// this line is used by starport scaffolding # proto/tx/rpc
	SetVersion(ctx context.Context, in *MsgSetVersion, opts ...grpc.CallOption) (*MsgSetVersionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) BondProvider(ctx context.Context, in *MsgBondProvider, opts ...grpc.CallOption) (*MsgBondProviderResponse, error) {
	out := new(MsgBondProviderResponse)
	err := c.cc.Invoke(ctx, "/arkeo.arkeo.Msg/BondProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ModProvider(ctx context.Context, in *MsgModProvider, opts ...grpc.CallOption) (*MsgModProviderResponse, error) {
	out := new(MsgModProviderResponse)
	err := c.cc.Invoke(ctx, "/arkeo.arkeo.Msg/ModProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OpenContract(ctx context.Context, in *MsgOpenContract, opts ...grpc.CallOption) (*MsgOpenContractResponse, error) {
	out := new(MsgOpenContractResponse)
	err := c.cc.Invoke(ctx, "/arkeo.arkeo.Msg/OpenContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CloseContract(ctx context.Context, in *MsgCloseContract, opts ...grpc.CallOption) (*MsgCloseContractResponse, error) {
	out := new(MsgCloseContractResponse)
	err := c.cc.Invoke(ctx, "/arkeo.arkeo.Msg/CloseContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimContractIncome(ctx context.Context, in *MsgClaimContractIncome, opts ...grpc.CallOption) (*MsgClaimContractIncomeResponse, error) {
	out := new(MsgClaimContractIncomeResponse)
	err := c.cc.Invoke(ctx, "/arkeo.arkeo.Msg/ClaimContractIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetVersion(ctx context.Context, in *MsgSetVersion, opts ...grpc.CallOption) (*MsgSetVersionResponse, error) {
	out := new(MsgSetVersionResponse)
	err := c.cc.Invoke(ctx, "/arkeo.arkeo.Msg/SetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// BondProvider creates or updates a provider bond.
	BondProvider(context.Context, *MsgBondProvider) (*MsgBondProviderResponse, error)
	// ModProvider modifies provider details.
	ModProvider(context.Context, *MsgModProvider) (*MsgModProviderResponse, error)
	// OpenContract opens a contract between a client and provider.
	OpenContract(context.Context, *MsgOpenContract) (*MsgOpenContractResponse, error)
	// CloseContract closes an existing contract.
	CloseContract(context.Context, *MsgCloseContract) (*MsgCloseContractResponse, error)
	// ClaimContractIncome allows a provider to claim contract income.
	ClaimContractIncome(context.Context, *MsgClaimContractIncome) (*MsgClaimContractIncomeResponse, error)
	// SetVersion sets the chain version.
	// this line is used by starport scaffolding # proto/tx/rpc
	SetVersion(context.Context, *MsgSetVersion) (*MsgSetVersionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) BondProvider(ctx context.Context, req *MsgBondProvider) (*MsgBondProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BondProvider not implemented")
}
func (*UnimplementedMsgServer) ModProvider(ctx context.Context, req *MsgModProvider) (*MsgModProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModProvider not implemented")
}
func (*UnimplementedMsgServer) OpenContract(ctx context.Context, req *MsgOpenContract) (*MsgOpenContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenContract not implemented")
}
func (*UnimplementedMsgServer) CloseContract(ctx context.Context, req *MsgCloseContract) (*MsgCloseContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseContract not implemented")
}
func (*UnimplementedMsgServer) ClaimContractIncome(ctx context.Context, req *MsgClaimContractIncome) (*MsgClaimContractIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimContractIncome not implemented")
}
func (*UnimplementedMsgServer) SetVersion(ctx context.Context, req *MsgSetVersion) (*MsgSetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVersion not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_BondProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBondProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BondProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.arkeo.Msg/BondProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BondProvider(ctx, req.(*MsgBondProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ModProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ModProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.arkeo.Msg/ModProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ModProvider(ctx, req.(*MsgModProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OpenContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOpenContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OpenContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.arkeo.Msg/OpenContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OpenContract(ctx, req.(*MsgOpenContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CloseContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCloseContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CloseContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.arkeo.Msg/CloseContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CloseContract(ctx, req.(*MsgCloseContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimContractIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimContractIncome)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimContractIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.arkeo.Msg/ClaimContractIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimContractIncome(ctx, req.(*MsgClaimContractIncome))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arkeo.arkeo.Msg/SetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetVersion(ctx, req.(*MsgSetVersion))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arkeo.arkeo.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BondProvider",
			Handler:    _Msg_BondProvider_Handler,
		},
		{
			MethodName: "ModProvider",
			Handler:    _Msg_ModProvider_Handler,
		},
		{
			MethodName: "OpenContract",
			Handler:    _Msg_OpenContract_Handler,
		},
		{
			MethodName: "CloseContract",
			Handler:    _Msg_CloseContract_Handler,
		},
		{
			MethodName: "ClaimContractIncome",
			Handler:    _Msg_ClaimContractIncome_Handler,
		},
		{
			MethodName: "SetVersion",
			Handler:    _Msg_SetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arkeo/arkeo/tx.proto",
}

func (m *MsgBondProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBondProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBondProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bond.Size()
		i -= size
		if _, err := m.Bond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBondProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBondProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBondProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgModProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SettlementDuration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SettlementDuration))
		i--
		dAtA[i] = 0x58
	}
	if len(m.PayAsYouGoRate) > 0 {
		for iNdEx := len(m.PayAsYouGoRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PayAsYouGoRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.SubscriptionRate) > 0 {
		for iNdEx := len(m.SubscriptionRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubscriptionRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.MaxContractDuration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxContractDuration))
		i--
		dAtA[i] = 0x40
	}
	if m.MinContractDuration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinContractDuration))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.MetadataNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MetadataNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MetadataUri) > 0 {
		i -= len(m.MetadataUri)
		copy(dAtA[i:], m.MetadataUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetadataUri)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgModProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOpenContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueriesPerMinute != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.QueriesPerMinute))
		i--
		dAtA[i] = 0x60
	}
	if m.Authorization != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Authorization))
		i--
		dAtA[i] = 0x58
	}
	if m.SettlementDuration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SettlementDuration))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.Deposit.Size()
		i -= size
		if _, err := m.Deposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.Rate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x38
	}
	if m.ContractType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOpenContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCloseContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ContractId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCloseContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimContractIncome) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimContractIncome) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimContractIncome) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.ContractId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimContractIncomeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimContractIncomeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimContractIncomeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBondProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Bond.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBondProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgModProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MetadataUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MetadataNonce != 0 {
		n += 1 + sovTx(uint64(m.MetadataNonce))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	if m.MinContractDuration != 0 {
		n += 1 + sovTx(uint64(m.MinContractDuration))
	}
	if m.MaxContractDuration != 0 {
		n += 1 + sovTx(uint64(m.MaxContractDuration))
	}
	if len(m.SubscriptionRate) > 0 {
		for _, e := range m.SubscriptionRate {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.PayAsYouGoRate) > 0 {
		for _, e := range m.PayAsYouGoRate {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.SettlementDuration != 0 {
		n += 1 + sovTx(uint64(m.SettlementDuration))
	}
	return n
}

func (m *MsgModProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOpenContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractType != 0 {
		n += 1 + sovTx(uint64(m.ContractType))
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	l = m.Rate.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Deposit.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.SettlementDuration != 0 {
		n += 1 + sovTx(uint64(m.SettlementDuration))
	}
	if m.Authorization != 0 {
		n += 1 + sovTx(uint64(m.Authorization))
	}
	if m.QueriesPerMinute != 0 {
		n += 1 + sovTx(uint64(m.QueriesPerMinute))
	}
	return n
}

func (m *MsgOpenContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCloseContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractId != 0 {
		n += 1 + sovTx(uint64(m.ContractId))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCloseContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimContractIncome) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ContractId != 0 {
		n += 1 + sovTx(uint64(m.ContractId))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgClaimContractIncomeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovTx(uint64(m.Version))
	}
	return n
}

func (m *MsgSetVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBondProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBondProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBondProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBondProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBondProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBondProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = append(m.Provider[:0], dAtA[iNdEx:postIndex]...)
			if m.Provider == nil {
				m.Provider = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataNonce", wireType)
			}
			m.MetadataNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProviderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinContractDuration", wireType)
			}
			m.MinContractDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinContractDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxContractDuration", wireType)
			}
			m.MaxContractDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxContractDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRate = append(m.SubscriptionRate, types.Coin{})
			if err := m.SubscriptionRate[len(m.SubscriptionRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayAsYouGoRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayAsYouGoRate = append(m.PayAsYouGoRate, types.Coin{})
			if err := m.PayAsYouGoRate[len(m.PayAsYouGoRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementDuration", wireType)
			}
			m.SettlementDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractType", wireType)
			}
			m.ContractType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractType |= ContractType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementDuration", wireType)
			}
			m.SettlementDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorization", wireType)
			}
			m.Authorization = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Authorization |= ContractAuthorization(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueriesPerMinute", wireType)
			}
			m.QueriesPerMinute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueriesPerMinute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			m.ContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = append(m.Client[:0], dAtA[iNdEx:postIndex]...)
			if m.Client == nil {
				m.Client = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = append(m.Delegate[:0], dAtA[iNdEx:postIndex]...)
			if m.Delegate == nil {
				m.Delegate = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimContractIncome) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimContractIncome: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimContractIncome: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			m.ContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimContractIncomeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimContractIncomeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimContractIncomeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
