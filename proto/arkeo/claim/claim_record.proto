syntax = "proto3";
package arkeo.claim;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/arkeonetwork/arkeo/x/claim/types";

// Action enumerates all possible claim actions on Arkeo.
enum Action {
  option (gogoproto.goproto_enum_prefix) = false;
  // ACTION_CLAIM indicates a claim action.
  ACTION_CLAIM = 0;
  // ACTION_VOTE indicates a vote action.
  ACTION_VOTE = 1;
  // ACTION_DELEGATE indicates a delegate action.
  ACTION_DELEGATE = 2;
}

// Chain represents the blockchain origin for the claim.
enum Chain {
  option (gogoproto.goproto_enum_prefix) = false;
  // ARKEO indicates the Arkeo chain.
  ARKEO = 0;
  // ETHEREUM indicates the Ethereum chain.
  ETHEREUM = 1;
}

// ClaimRecord is the metadata of claim data per address.
message ClaimRecord {
  // chain specifies the blockchain origin of the claim.
  Chain chain = 1;

  // address is the arkeo address of claim user.
  string address = 2 [ (gogoproto.moretags) = "yaml:\"address\"" ];

  // amount_claim is the claimable amount for claim action (set to 0 after
  // action completed).
  cosmos.base.v1beta1.Coin amount_claim = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"amount_claim\""
  ];
  // amount_vote is the claimable amount for vote action (set to 0 after action
  // completed).
  cosmos.base.v1beta1.Coin amount_vote = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"amount_vote\""
  ];
  // amount_delegate is the claimable amount for delegate action (set to 0 after
  // action completed).
  cosmos.base.v1beta1.Coin amount_delegate = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"amount_delegate\""
  ];
  // is_transferable specifies if the claim can be transferred.
  bool is_transferable = 6;
}