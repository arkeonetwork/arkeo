syntax = "proto3";

package arkeo.claim;

import "cosmos_proto/cosmos.proto";
import "arkeo/claim/claim_record.proto";
import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

option go_package = "github.com/arkeonetwork/arkeo/x/claim/types";


// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  rpc ClaimEth(MsgClaimEth) returns (MsgClaimEthResponse);
  rpc ClaimArkeo(MsgClaimArkeo) returns (MsgClaimArkeoResponse);
  rpc TransferClaim(MsgTransferClaim) returns (MsgTransferClaimResponse);
  rpc AddClaim(MsgAddClaim) returns (MsgAddClaimResponse);
  rpc ClaimThorchain(MsgClaimThorchain) returns (MsgClaimThorchainResponse);

}

message MsgClaimEth {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "arkeo/x/claim/MsgClaimEth";  
  string  creator  = 1 [(cosmos_proto.scalar)  = "cosmos.AddressString"] ;
  string eth_address = 2; // the address the claim is for
  string signature = 3; // EIP712 signature that has to be signed by ethAddress
}

message MsgClaimEthResponse {
  string ethAddress = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string arkeoAddress = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  int64 ethClaimAmount = 3 [(cosmos_proto.scalar) = "cosmos.Int"];
  int64 arkeoClaimAmount = 4 [(cosmos_proto.scalar) = "cosmos.Int"];
}

message MsgClaimArkeo {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "arkeo/x/claim/MsgClaimArkeo";  
  string  creator  = 1 [(cosmos_proto.scalar)  = "cosmos.AddressString"] ;
}

message MsgClaimArkeoResponse {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  int64 amount = 2 [(cosmos_proto.scalar) = "cosmos.Int"];
}

message MsgTransferClaim {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "arkeo/x/claim/MsgTransferClaim"; 
  string  creator  = 1 [(cosmos_proto.scalar)  = "cosmos.AddressString"] ;
  string toAddress = 2 [(cosmos_proto.scalar)  = "cosmos.AddressString"] ;
}

message MsgTransferClaimResponse {}

message MsgAddClaim {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "arkeo/x/claim/MsgAddClaim"; 
  string creator = 1 [(cosmos_proto.scalar)  = "cosmos.AddressString"] ;
  Chain chain = 2;
  string address = 3;
  int64 amount = 4;
}

message MsgAddClaimResponse {}

message MsgClaimThorchain {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "arkeo/x/claim/MsgClaimThorchain"; 
  string  creator  = 1 [(cosmos_proto.scalar)  = "cosmos.AddressString"] ;
  string from_address = 2; // the address that is delegating the claim
  string to_address = 3; // the address to delegate the claim to
}

message MsgClaimThorchainResponse {
  string from_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string to_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}