syntax = "proto3";
package arkeo.arkeo;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "arkeo/arkeo/keeper.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

option go_package = "github.com/arkeonetwork/arkeo/x/arkeo/types";

service Msg {
  option (cosmos.msg.v1.service) = true;
  // BondProvider creates or updates a provider bond.
  rpc BondProvider(MsgBondProvider) returns (MsgBondProviderResponse);
  // ModProvider modifies provider details.
  rpc ModProvider(MsgModProvider) returns (MsgModProviderResponse);
  // OpenContract opens a contract between a client and provider.
  rpc OpenContract(MsgOpenContract) returns (MsgOpenContractResponse);
  // CloseContract closes an existing contract.
  rpc CloseContract(MsgCloseContract) returns (MsgCloseContractResponse);
  // ClaimContractIncome allows a provider to claim contract income.
  rpc ClaimContractIncome(MsgClaimContractIncome)
      returns (MsgClaimContractIncomeResponse);

  // SetVersion sets the chain version.
  // this line is used by starport scaffolding # proto/tx/rpc
  rpc SetVersion(MsgSetVersion) returns (MsgSetVersionResponse);
}

// MsgBondProvider is used to bond a provider.
message MsgBondProvider {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "arkeo/x/arkeo/MsgBondProvider";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string provider = 2;
  string service = 3;
  string bond = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgBondProviderResponse is the response for MsgBondProvider.
message MsgBondProviderResponse {}

// MsgModProvider is used to modify provider details.
message MsgModProvider {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "arkeo/x/arkeo/MsgModProvider";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  bytes provider = 2
      [ (gogoproto.casttype) = "github.com/arkeonetwork/arkeo/common.PubKey" ];
  string service = 3;
  string metadata_uri = 4;
  uint64 metadata_nonce = 5;
  ProviderStatus status = 6;
  int64 min_contract_duration = 7;
  int64 max_contract_duration = 8;
  repeated cosmos.base.v1beta1.Coin subscription_rate = 9
      [ (gogoproto.nullable) = false ];
  repeated cosmos.base.v1beta1.Coin pay_as_you_go_rate = 10
      [ (gogoproto.nullable) = false ];
  int64 settlement_duration = 11;
}

// MsgModProviderResponse is the response for MsgModProvider.
message MsgModProviderResponse {}

// MsgOpenContract is used to open a new contract between a client and provider.
message MsgOpenContract {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "arkeo/x/arkeo/MsgOpenContract";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string provider = 2;
  string service = 3;
  string client = 4;
  string delegate = 5;
  ContractType contract_type = 6;
  int64 duration = 7;
  cosmos.base.v1beta1.Coin rate = 8 [ (gogoproto.nullable) = false ];
  string deposit = 9 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  int64 settlement_duration = 10;
  ContractAuthorization authorization = 11;
  int64 queries_per_minute = 12;
}

// MsgOpenContractResponse is the response for MsgOpenContract.
message MsgOpenContractResponse {}

// MsgCloseContract is used to close an existing contract.
message MsgCloseContract {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "arkeo/x/arkeo/MsgCloseContract";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 contract_id = 2;
  bytes client = 3
      [ (gogoproto.casttype) = "github.com/arkeonetwork/arkeo/common.PubKey" ];
  bytes delegate = 4
      [ (gogoproto.casttype) = "github.com/arkeonetwork/arkeo/common.PubKey" ];
}

// MsgCloseContractResponse is the response for MsgCloseContract.
message MsgCloseContractResponse {}

// MsgClaimContractIncome is used by a provider to claim contract income.
message MsgClaimContractIncome {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "arkeo/x/arkeo/MsgClaimContractIncome";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 contract_id = 2;
  bytes signature = 4;
  int64 nonce = 5;
}

// MsgClaimContractIncomeResponse is the response for MsgClaimContractIncome.
message MsgClaimContractIncomeResponse {}

// MsgSetVersion is used to set the chain version.
// this line is used by starport scaffolding # proto/tx/message
message MsgSetVersion {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "arkeo/x/arkeo/MsgSetVersion";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  int64 version = 2;
}

// MsgSetVersionResponse is the response for MsgSetVersion.
message MsgSetVersionResponse {}
